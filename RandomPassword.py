# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\projects\project\style.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import random
import sys
import string
import pyperclip
import time
from threading import Thread

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(605, 607)
        MainWindow.setMinimumSize(QtCore.QSize(600, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setStyleSheet("background-color:white;")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.label_2 = QtWidgets.QLabel(self.page)
        self.label_2.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.label_5 = QtWidgets.QLabel(self.page)
        self.label_5.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.page)
        self.lineEdit.setMinimumSize(QtCore.QSize(350, 40))
        self.lineEdit.setStyleSheet("font: 75 14pt \"Times New Roman\";\n"
"border-radius:20px;\n"
"background-color:#FFFACD;\n"
"padding-left: 20px;\n"
"padding-right: 20px;")
        self.lineEdit.setFrame(True)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setDragEnabled(False)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_6 = QtWidgets.QPushButton(self.page)
        self.pushButton_6.setMinimumSize(QtCore.QSize(150, 40))
        self.pushButton_6.setStyleSheet("QPushButton{\n"
"    font: 75 14pt \"Times New Roman\";\n"
"    border-radius:20px;\n"
"    background-color:#FFFACD;\n"
"    border-color:black;    \n"
"    border-width:2px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color:#FFFAAA;\n"
"}\n"
"QPushButton:pressed{\n"
"    background-color:#FFE4B5;\n"
"}\n"
"\n"
"")
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushButton_6)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.widget = QtWidgets.QWidget(self.page)
        self.widget.setStyleSheet("border-color:black;")
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setStyleSheet("font: 75 16pt \"Times New Roman\";")
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3, 0, QtCore.Qt.AlignHCenter)
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.label_4.setObjectName("label_4")
        self.verticalLayout_2.addWidget(self.label_4, 0, QtCore.Qt.AlignHCenter)
        self.horizontalSlider = QtWidgets.QSlider(self.widget)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(200, 0))
        self.horizontalSlider.setMinimum(4)
        self.horizontalSlider.setMaximum(30)
        self.horizontalSlider.setPageStep(5)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setInvertedAppearance(False)
        self.horizontalSlider.setInvertedControls(False)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider, 0, QtCore.Qt.AlignHCenter)
        self.checkBox = QtWidgets.QCheckBox(self.widget)
        self.checkBox.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_2.addWidget(self.checkBox, 0, QtCore.Qt.AlignLeft)
        self.checkBox_3 = QtWidgets.QCheckBox(self.widget)
        self.checkBox_3.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.checkBox_3.setObjectName("checkBox_3")
        self.verticalLayout_2.addWidget(self.checkBox_3, 0, QtCore.Qt.AlignLeft)
        self.checkBox_2 = QtWidgets.QCheckBox(self.widget)
        self.checkBox_2.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_2.addWidget(self.checkBox_2, 0, QtCore.Qt.AlignLeft)
        self.verticalLayout_3.addWidget(self.widget)
        self.pushButton_5 = QtWidgets.QPushButton(self.page)
        self.pushButton_5.setMinimumSize(QtCore.QSize(150, 40))
        self.pushButton_5.setStyleSheet("QPushButton{\n"
"    font: 75 14pt \"Times New Roman\";\n"
"    border-radius:20px;\n"
"    background-color:#FFFACD;\n"
"    border-color:black;    \n"
"    border-width:2px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color:#FFFAAA;\n"
"}\n"
"QPushButton:pressed{\n"
"    background-color:#FFE4B5;\n"
"}\n"
"\n"
"")
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_3.addWidget(self.pushButton_5, 0, QtCore.Qt.AlignHCenter)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Генератор паролей by Dmitr.Pod."))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">Добро пожаловать в генератор паролей</span></p><p align=\"center\">Выберите необходимые параметры и нажмите на кнопку</p><p align=\"center\">&quot;Сгенерировать&quot;</p></body></html>"))
        self.pushButton_6.setText(_translate("MainWindow", "Копировать"))
        self.label_3.setText(_translate("MainWindow", "Настройки генерации пароли"))
        self.label_4.setText(_translate("MainWindow", "Длина пароля: 4"))
        self.checkBox.setText(_translate("MainWindow", "Верхний регистр"))
        self.checkBox_3.setText(_translate("MainWindow", "Цифры"))
        self.checkBox_2.setText(_translate("MainWindow", "Символы"))
        self.pushButton_5.setText(_translate("MainWindow", "Сгенерировать"))


        def Generate(Leb_Pass, situation):
            Password = []
            Symbols = string.ascii_letters
            Numbers = "0123456789"
            Txt = "!@#$%^&*()_+?|"
            if situation == 1:
                for i in range(Leb_Pass):
                        PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                        Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 2:
                for i in range(Leb_Pass):
                    Symbols = Symbols+Numbers
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 3:
                for i in range(Leb_Pass):
                    Symbols = Symbols+Numbers+Txt
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 4:
                for i in range(Leb_Pass):
                    Symbols = Symbols+Txt
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 5:
                for i in range(Leb_Pass):
                    Symbols = Numbers
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 6:
                for i in range(Leb_Pass):
                    Symbols = Txt
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 7:
                for i in range(Leb_Pass):
                    Symbols = Txt+Numbers
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)
            elif situation == 0:
                for i in range(Leb_Pass):
                    Symbols = string.ascii_lowercase
                    PassSimb = Symbols[random.randint(0,(len(Symbols)-1))]
                    Password.insert(i,PassSimb)
                result = "".join(Password)
                self.lineEdit.setText(result)                

        def ClickGenerate():
            LebPass = self.horizontalSlider.value()
            Register = self.checkBox.checkState()
            Number = self.checkBox_3.checkState()
            Symbol = self.checkBox_2.checkState()
            if Register != 0 and Number == 0 and Symbol == 0:
                Generate(LebPass, 1)
            elif Register != 0 and Number != 0 and Symbol == 0:
                Generate(LebPass, 2)
            elif Register != 0 and Number != 0 and Symbol != 0:
                Generate(LebPass, 3)
            elif Register != 0 and Number == 0 and Symbol != 0:
                Generate(LebPass, 4)
            elif Register == 0 and Number != 0 and Symbol == 0:
                Generate(LebPass, 5)
            elif Register == 0 and Number == 0 and Symbol != 0:
                Generate(LebPass, 6)  
            elif Register == 0 and Number != 0 and Symbol != 0:
                Generate(LebPass, 7)  
            else:
                Generate(LebPass, 0)  

        def Sleep():
            time.sleep(0.8)
            self.label_5.setText("")


        def CopyText():
            Text = self.lineEdit.text()
            print(Text)
            th = Thread(target=Sleep, args=())
            if len(Text) > 0:
                pyperclip.copy(self.lineEdit.text())
                pyperclip.paste()
                self.label_5.setText("Пароль скопирован в буфер обмена!")
                th.start()
            else:
                self.label_5.setText("Сгенерируйте пароль")
                th.start()


            

        def SlideIt(value):
            self.label_4.setText("Длина пароля: "+str(value))

        self.horizontalSlider.valueChanged.connect(SlideIt)

        self.pushButton_5.clicked.connect(ClickGenerate)
        self.pushButton_6.clicked.connect(CopyText)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
